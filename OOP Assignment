Assignment 1: Design Your Own Class! 🏗️

Step 1: Creating a Class
# Base class: Smartphone
class Smartphone:
    def __init__(self, brand, model, price):
        self.brand = brand
        self.model = model
        self.price = price
    
    def show_details(self):
        return f"Smartphone: {self.brand} {self.model}, Price: ${self.price}"

    def make_call(self, number):
        return f"Calling {number} from {self.brand} {self.model}..."

# Subclass: Smartwatch (Inheritance Example)
class Smartwatch(Smartphone):
    def __init__(self, brand, model, price, battery_life):
        super().__init__(brand, model, price)
        self.battery_life = battery_life

    def show_details(self):
        return f"Smartwatch: {self.brand} {self.model}, Battery Life: {self.battery_life} hours, Price: ${self.price}"

    def track_fitness(self):
        return f"{self.brand} {self.model} is tracking your fitness."
```

#### Example Usage
```python
# Create objects
phone = Smartphone("Apple", "iPhone 15", 1200)
watch = Smartwatch("Samsung", "Galaxy Watch 5", 300, 48)

# Display details
print(phone.show_details())
print(watch.show_details())

# Perform actions
print(phone.make_call("123-456-7890"))
print(watch.track_fitness())
```

Activity 2: Polymorphism Challenge

Step 1: Defining Classes with `move()` Method

# Base class: Vehicle
class Vehicle:
    def move(self):
        pass

# Subclass: Car
class Car(Vehicle):
    def move(self):
        return "Driving 🚗"

# Subclass: Plane
class Plane(Vehicle):
    def move(self):
        return "Flying ✈️"

# Subclass: Boat
class Boat(Vehicle):
    def move(self):
        return "Sailing 🚤"


Step 2: Using Polymorphism

# Function to demonstrate polymorphism
def show_vehicle_movement(vehicle):
    print(vehicle.move())

# Create objects
car = Car()
plane = Plane()
boat = Boat()

# Demonstrate polymorphism
show_vehicle_movement(car)   # Output: Driving 🚗
show_vehicle_movement(plane) # Output: Flying ✈️
show_vehicle_movement(boat)  # Output: Sailing 🚤


